'fileTypes': [
  'g'
  'gi'
  'gd'
]
'name': 'GAP'
'patterns': [
  {
    'begin': '(^[ \\t]+)?(?=#)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.gap'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.gap'
        'end': '\\n'
        'name': 'comment.line.number-sign.gap'
      }
    ]
  }
  {
    'match': '\\b(?i:(0x\\h*)L)'
    'name': 'constant.numeric.integer.long.hexadecimal.gap'
  }
  {
    'match': '\\b(?i:(0x\\h*))'
    'name': 'constant.numeric.integer.hexadecimal.gap'
  }
  {
    'match': '\\b(?i:(0[0-7]+)L)'
    'name': 'constant.numeric.integer.long.octal.gap'
  }
  {
    'match': '\\b(0[0-7]+)'
    'name': 'constant.numeric.integer.octal.gap'
  }
  {
    'match': '\\b(?i:(((\\d+(\\.(?=[^a-zA-Z_])\\d*)?|(?<=[^0-9a-zA-Z_])\\.\\d+)(e[\\-\\+]?\\d+)?))J)'
    'name': 'constant.numeric.complex.gap'
  }
  {
    'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
    'name': 'constant.numeric.float.gap'
  }
  {
    'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
    'name': 'constant.numeric.float.gap'
  }
  {
    'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
    'name': 'constant.numeric.float.gap'
  }
  {
    'match': '\\b(?i:([1-9]+[0-9]*|0)L)'
    'name': 'constant.numeric.integer.long.decimal.gap'
  }
  {
    'match': '\\b([1-9]+[0-9]*|0)'
    'name': 'constant.numeric.integer.decimal.gap'
  }
  {
    'captures':
      '1':
        'name': 'storage.modifier.global.gap'
    'match': '\\b(global)\\b'
  }
  {
    'name': 'keyword.control.import.gap'
    'match': '\\b(LoadPackage|Load)\\b'
  }
  {
    'comment': 'keywords that delimit flow blocks or alter flow from within a block'
    'match': '\\b(Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|break|continue|do|elif|else|end|false|fi|for|function|if|in|local|mod|not|od|or|quit|rec|repeat|return|then|true|until|while)\\b'
    'name': 'keyword.control.flow.gap'
  }
  {
    'match': '<\\=|>\\=|\\=|<|>|<>'
    'name': 'keyword.operator.comparison.gap'
  }
  {
    'match': '\\+|\\-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~'
    'name': 'keyword.operator.arithmetic.gap'
  }
  {
    'match': ':\\='
    'name': 'keyword.operator.assignment.gap'
  }
  {
        'begin': '(")'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.gap'
        'comment': 'double-quoted raw string'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.gap'
          '2':
            'name': 'meta.empty-string.double.gap'
          '3':
            'name': 'invalid.illegal.unclosed-string.gap'
        'name': 'string.quoted.double.single-line.unicode.gap'
  }
]

'scopeName': 'source.gap'
